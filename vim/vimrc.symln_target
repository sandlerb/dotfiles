"   |\   / /O  __
"   \ \_/ /__ |  \  ___
"    \   / \ \||\ \||\ \
"     \_/   \_\  \_\| \_\ rc
"


"''''''''''''''"
"  VIM OPTIONS "
"''''''''''''''"

" disable legacy vi compatibility in favor of features
set nocompatible

syntax enable
syntax on
filetype off
silent! execute pathogen#infect()
filetype plugin indent on

set mouse=a
set clipboard=unnamed
set encoding=utf-8
set showcmd     "show whatever command we're typing
set undofile    "make an undo file so we can undo/redo between sessions
set hidden      "hide buffers instead of closing them
set ttyfast


let mapleader="'"


"" Whitespace ""
filetype indent on
set nowrap
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set backspace=indent,eol,start
set autoindent

set fillchars+=vert:\ 

"" Searching ""
set incsearch
set ignorecase
" override ignorecase if search string contains uppercase letters
set smartcase


"" Completion ""
set wildmenu
set wildmode=list:longest


"" Layout ""
set title
set colorcolumn=80,81
set number
set hlsearch
set laststatus=2
set cursorline

nohl                    "Don't highlight my last search everytime I source this

" Highlight conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Shortcut to jump to next conflict marker
nnoremap <silent> <leader>c /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>

" lines to scroll when cursor leaves screen
set scrolljump=3
" minimum lines to keep above and below cursor
set scrolloff=3
set lazyredraw

"" Folding ""
set foldmethod=syntax
set nofoldenable

nnoremap <silent> <leader>s :.s/(\(.*\),[ ]\(.*\))/(\2, \1)/<CR>:nohl<CR>

"" Mappings ""

inoremap jk <esc>
inoremap JK <esc>
inoremap kj <esc>
inoremap KJ <esc>

vnoremap jk <esc>
vnoremap JK <esc>
vnoremap kj <esc>
vnoremap KJ <esc>

nnoremap ; :

" shortcut for macros
nnoremap <leader>q @q

" shortcut for switching buffers
noremap <leader>b :ls<CR>:b<Space>

nnoremap <leader>n :nohl<cr>

" follow pattern for traversing search results with undo/redo
nnoremap U <c-r>

" press space to insert one character then exit insert mode
nnoremap <Space> i_<Esc>r

" yank from the cursor to the end of the line, to be consistent with C and D
nnoremap Y y$

" window switching
noremap <c-h> <c-w>h
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l

" cycle windows
nnoremap = <c-w>w

" help I don't have page up or down keys
noremap <F8> <PageDown>
noremap <F9> <PageUp>


"'''''''''''"
"  PLUGINS  "
"'''''''''''"

"" Solarized ""
set background=dark
colorscheme solarized
let g:solarized_termtrans = 1


"" GitGutter ""
" Show at most this many signs (don't want to slow vim down)
let g:gitgutter_max_signs = 300
" match the SignColumn bg color to the number column
highlight SignColumn ctermbg=0
highlight GitGutterAdd ctermbg=0 ctermfg=DarkGreen
highlight GitGutterDelete ctermbg=0 ctermfg=DarkRed
highlight GitGutterChange ctermbg=0 ctermfg=DarkYellow
highlight GitGutterChangeDelete ctermbg=0 ctermfg=DarkMagenta
" use some thicker symbols so the color really ~shines~
let g:gitgutter_sign_added='✚'
let g:gitgutter_sign_removed='✖'
let g:gitgutter_sign_modified='✱'
let g:gitgutter_sign_modified_removed='↪'
" always show sign column
let g:gitgutter_sign_column_always=1
" map jumping to changed hunks
nnoremap <leader>g :GitGutterNextHunk<CR>
nnoremap <leader>G :GitGutterPrevHunk<CR>

"" vim-airline ""
" check for airline symbols
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

silent! let g:airline_powerline_fonts=1            " enable powerline symbols
silent! let g:airline_them='solarized_brett'    " slightly modified solarized
silent! let g:airline#extensions#tabline#enabled = 1

"" NERDTree ""
" close if only window left on exit
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif 

map <F1> :NERDTreeToggle<CR>
