"   |\   / /O  __              "
"   \ \_/ /__ |  \  ___        "
"    \   / \ \||\ \||\ \       "
"     \_/   \_\  \_\| \_\ rc   "
"                              "

" first clear any existing autocommands
autocmd!

" disable legacy vi compatibility in favor of features
set nocompatible

filetype on
filetype off
" Vundle()
" {
    " Set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    set rtp+=~/.fzf
    call vundle#begin()

    Plugin 'gmarik/Vundle.vim' " let Vundle manage Vundle

    " Aesthetics
    Plugin 'altercation/vim-colors-solarized'   " Better colors
    Plugin 'airblade/vim-gitgutter'             " Better editing files managed by git

    " Syntax
    Plugin 'nvie/vim-flake8'                    " PEP8 syntax checking
    Plugin 'rhysd/vim-clang-format'             " C/C++ formatting

    " Utilities
    Plugin 'junegunn/fzf.vim'                   " Fuzzy file finder

    " All of your plugins must be added before the following line
    call vundle#end()
" }
filetype plugin indent on

syntax enable
syntax on

" System()
" {
    "" Creating directories if they don't exist
    silent execute '!mkdir -p $HOME/.vimundo'
    silent execute '!mkdir -p $HOME/.vimswap'

    set directory=$HOME/.vimswap/
    set undodir=$HOME/.vimundo/
    set undofile
" }

" UI() 
" {
    " Init()
    " {
        set mouse=a
        set clipboard=unnamed
        set encoding=utf-8
        set fileencoding=utf-8
        set showcmd         " show whatever command we're typing
        set hidden          " hide buffers instead of closing them
        set ttyfast         " scroll faster
        set lazyredraw      " only redraw when needed
        set scrolljump=3    " lines to scroll when cursor leaves screen
        set scrolloff=6     " minimum lines to keep above and below cursor
    " }

    " Formatting()
    " {
        set nowrap
        set expandtab
        set shiftwidth=4
        set tabstop=4
        set softtabstop=4
        set backspace=indent,eol,start
        set autoindent
        set formatoptions=rqljo

        " Recognize .md files as markdown
        au BufRead,BufNewFile *.md set filetype=markdown
    " }

    " Layout()
    " {
        set fillchars+=vert:\ 
        set title
        set colorcolumn=101,102
        set number
        set hlsearch
        set laststatus=2
        set cursorline
        set matchpairs+=<:>
    " }

    " Search_And_Replace()
    " {
        set incsearch
        set ignorecase

        " Override ignorecase if search string contains uppercase letters
        set smartcase

        " Highlight conflict markers
        match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
    " }

    " Completion()
    " {
        set wildmenu
        set wildmode=list:longest
        set wildignore=*.pyc,*.d,*.o,*.gcno
    " }
" }

" Mappings()
" {
    " essentials
    let mapleader="'"
    nnoremap ; :
    vnoremap ; :

    " Escape
    inoremap jk <esc>
    inoremap JK <esc>
    inoremap Jk <esc>

    vnoremap jk <esc>
    vnoremap JK <esc>
    vnoremap Jk <esc>

    " shortcut for macros
    nnoremap <leader>q @q

    " shortcut for switching buffers
    noremap <leader>b :ls<CR>:b<Space>

    " shortcut for quick highlight removal
    nnoremap <leader>n :nohl<cr>
    vnoremap <leader>n :nohl<cr>

    " follow pattern for traversing search results with undo/redo
    nnoremap U <c-r>

    " press space to insert one character then exit insert mode
    nnoremap <Space> i_<Esc>r

    " yank from the cursor to the end of the line, to be consistent with C and D
    nnoremap Y y$

    " window switching
    noremap <c-h> <c-w>h
    noremap <c-j> <c-w>j
    noremap <c-k> <c-w>k
    noremap <c-l> <c-w>l

    " rotate windows
    nnoremap <leader>r <c-w><c-r>

    " Shortcut to jump to next conflict marker
    nnoremap <silent> <leader>c /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>

    " regex to swap arguments
    nnoremap <silent> <leader>s :.s/(\(.*\),[ ]\(.*\))/(\2, \1)/<CR>:nohl<CR>

    " can't seem to get a <D-v> mapping working, so use this for now
    set pastetoggle=<F2>
" }

" Plugins()
" {
    " Solarized()
    " {
        set background=dark
        let t_Co=256
        colorscheme solarized
        let g:solarized_termtrans = 1
    " }

    " GitGutter()
    " {
        " Show at most this many signs (don't want to slow vim down)
        let g:gitgutter_max_signs = 300

        " match the SignColumn bg color to the number column
        highlight SignColumn ctermbg=0
        highlight GitGutterAdd ctermbg=0 ctermfg=DarkGreen
        highlight GitGutterDelete ctermbg=0 ctermfg=DarkRed
        highlight GitGutterChange ctermbg=0 ctermfg=DarkYellow
        highlight GitGutterChangeDelete ctermbg=0 ctermfg=DarkMagenta

        " use some thicker symbols so the color really ~shines~
        let g:gitgutter_sign_added='✚'
        let g:gitgutter_sign_removed='✖'
        let g:gitgutter_sign_modified='✱'
        let g:gitgutter_sign_modified_removed='↪'

        " always show sign column
        let g:gitgutter_sign_column_always=1

        " map jumping to changed hunks
        nnoremap <leader>g :GitGutterNextHunk<CR>
        nnoremap <leader><leader>g :GitGutterPrevHunk<CR>
    " }

    " fzf() {
        let g:fzf_layout = { 'down' : '40%' }

        map <leader>t :Files<CR>
    " }

    " vim-clang-format()
    " {
        " point to the right version
        let g:clang_format#command="clang-format"

        " Auto-detect a .clang-format file
        let g:clang_format#detect_style_file=1

        autocmd FileType c,cpp nnoremap <buffer><leader>f :<C-u>ClangFormat<CR>
        autocmd FileType c,cpp vnoremap <buffer><leader>f :ClangFormat<CR>
        autocmd FileType c,cpp inoremap <buffer><leader>f <Esc>:ClangFormat<CR>
    " }
" }

nohl    "Don't highlight my last search everytime I source this
